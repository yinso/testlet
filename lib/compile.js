// Generated by CoffeeScript 1.4.0
(function() {
  var amdee, coffee, compile, fs, path, resolveFiles, template, util;

  amdee = require('amdee');

  fs = require('fs');

  path = require('path');

  util = require('./util');

  coffee = require('coffee-script');

  resolveFiles = function(filePath) {
    var files, helper;
    helper = function(filePath, files) {
      var data, file, filePaths, stat, _i, _len, _results;
      try {
        stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
          filePaths = fs.readdirSync(filePath);
          _results = [];
          for (_i = 0, _len = filePaths.length; _i < _len; _i++) {
            file = filePaths[_i];
            _results.push(helper(path.join(filePath, file), files));
          }
          return _results;
        } else {
          data = fs.readFileSync(filePath, 'utf8');
          data = path.extname(filePath) === '.coffee' ? coffee.compile(data) : data;
          files.push(data);
          return files;
        }
      } catch (e) {
        return files;
      }
    };
    files = [];
    files = helper(filePath, []);
    return files;
  };

  template = function(timeout, files, targetPath) {
    return "var Runner = require(\"testlet\");\nvar test = new Runner(" + timeout + ");\nfunction describe (name, func) {\n  test.add(name, func);\n}\n\nfunction it (name, func) {\n  test.do(name, func);\n}\n\n" + (files.join('')) + "\nif (window) {\n  window.test = test;\n}\nmodule.exports = test;\ntest.run(function (err, res) { console.log(err, res); });";
  };

  compile = function(timeout, dirPath, targetPath, cb) {
    var files;
    files = resolveFiles(path.resolve(dirPath));
    return fs.writeFile(targetPath, template(timeout, files, path.resolve(targetPath)), 'utf8', function(err) {
      if (err) {
        return cb(err);
      } else {
        amdee.run({
          source: targetPath,
          target: path.join(path.dirname(targetPath), "main.js"),
          recursive: true
        });
        return cb();
      }
    });
  };

  module.exports = compile;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var Test, TestResult, timeoutCallback;

  TestResult = require('./test-result');

  timeoutCallback = function(timeout, cb, timeoutCB) {
    var beforeTimeout, largeTimeout, maxTimeout, obj, whenTimeout;
    maxTimeout = 2147483648;
    timeout = timeout === 0 ? Infinity : timeout;
    obj = {
      id: null,
      timedOut: false,
      once: false,
      remainder: timeout
    };
    largeTimeout = function(cb, timeout) {
      var callback, decr;
      decr = function() {
        var res;
        if (obj.remainder < maxTimeout) {
          res = obj.remainder;
          obj.remainder = 0;
          return res;
        } else {
          res = maxTimeout;
          obj.remainder -= maxTimeout;
          return res;
        }
      };
      callback = function() {
        var time;
        if (obj.remainder > 0) {
          clearTimeout(obj.id);
          time = decr();
          obj.id = setTimeout(callback, time);
          return obj.id;
        } else {
          clearTimeout(obj.id);
          return cb();
        }
      };
      return callback();
    };
    whenTimeout = function() {
      obj.timedOut = true;
      clearTimeout(obj.id);
      return timeoutCB();
    };
    beforeTimeout = function() {
      if (!obj.timedOut) {
        if (obj.once) {

        } else {
          clearTimeout(obj.id);
          obj.once = true;
          return cb.apply(this, arguments);
        }
      }
    };
    obj.id = largeTimeout(whenTimeout, timeout);
    return beforeTimeout;
  };

  Test = (function() {

    function Test(runner, name, func, timeout) {
      this.runner = runner;
      this.name = name;
      this.func = func;
      this.timeout = timeout != null ? timeout : this.runner.timeout || 2000;
      this.async = this.func && this.func.length;
    }

    Test.prototype.run = function(next) {
      var callback, result,
        _this = this;
      callback = timeoutCallback(this.timeout, next, function() {
        return next(null, new TestResult(_this, _this.runner.resetLog(), new Error("timeout " + _this.timeout + " msec exceeded.")));
      });
      if (this.async) {
        try {
          return this.func(function(err, res) {
            var result;
            result = err ? new TestResult(_this, _this.runner.resetLog(), err) : new TestResult(_this, _this.runner.resetLog());
            return callback(null, result);
          });
        } catch (e) {
          return callback(null, new TestResult(this, this.runner.resetLog(), e));
        }
      } else {
        result = (function() {
          try {
            this.func();
            return new TestResult(this, this.runner.resetLog());
          } catch (e) {
            return new TestResult(this, this.runner.resetLog(), e);
          }
        }).call(this);
        return callback(null, result);
      }
    };

    return Test;

  })();

  module.exports = Test;

}).call(this);

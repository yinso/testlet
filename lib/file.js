// Generated by CoffeeScript 1.4.0
(function() {
  var CliReporter, Runner, entry, fs, loadTest, normalizePath, path, util,
    __slice = [].slice;

  Runner = require('./runner');

  fs = require('fs');

  path = require('path');

  util = require('./util');

  CliReporter = require('./cli-reporter');

  require('coffee-script');

  normalizePath = function(dirPath, filePath) {
    var fullPath;
    fullPath = path.resolve(path.join(dirPath, filePath));
    return path.join(path.dirname(fullPath), path.basename(filePath, path.extname(filePath)));
  };

  entry = function(timeout, dirPath) {
    var helper, runner;
    runner = new Runner(timeout);
    global.test = runner;
    global.describe = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return runner.add.apply(runner, args);
    };
    global.it = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return runner.it.apply(runner, args);
    };
    helper = function(filePath, next) {
      return loadTest(runner, normalizePath(dirPath, filePath), next);
    };
    return fs.readdir(dirPath, function(err, files) {
      return util.forEach(files, helper, function(err, res) {
        if (err) {
          console.error("");
          console.error("********** LOADING ERROR START **********");
          console.error("");
          console.error("(Test script fail to load - check to ensure it compiles/loads with Node)");
          console.error("");
          console.error(err);
          console.error("");
          if (err.stack) {
            console.error(err.stack);
          }
          console.error("");
          console.error("********** LOADING ERROR END **********");
          console.error("");
          return process.exit();
        } else {
          process.on('uncaughtException', function(err) {
            console.error("");
            console.error("********** UNCAUGHT EXCEPTION START **********");
            console.error("");
            console.error("(This is likely due to an error thrown inside an async test case callback not being trapped)");
            console.error("");
            console.error(err.stack);
            console.error("");
            console.error("********** UNCAUGHT EXCEPTION END **********");
            return console.error("");
          });
          return runner.run(function(err, res) {
            var reporter;
            if (err) {
              return console.error("[Error] encountered error while executing test cases", err);
            } else {
              reporter = new CliReporter(res);
              reporter.report();
              return process.exit();
            }
          });
        }
      });
    });
  };

  loadTest = function(runner, filePath, next) {
    try {
      require(filePath);
      return next(null);
    } catch (e) {
      return next(e);
    }
  };

  module.exports = entry;

}).call(this);

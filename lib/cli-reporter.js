// Generated by CoffeeScript 1.4.0
(function() {
  var CliReporter, SuiteResult, TestResult,
    __slice = [].slice;

  TestResult = require('./test-result');

  SuiteResult = require('./suite-result');

  CliReporter = (function() {

    function CliReporter(result) {
      this.result = result;
    }

    CliReporter.prototype.report = function() {
      if (this.result instanceof SuiteResult) {
        return this.reportSuiteResult(this.result);
      } else {
        return this.reportCase(this.result, 0);
      }
    };

    CliReporter.prototype.reportSuiteResult = function(result, tabLevel) {
      var count, failedResult, failedResults, success, _i, _len, _ref, _results;
      if (tabLevel == null) {
        tabLevel = 0;
      }
      count = result.count();
      success = result.success();
      failedResults = result.failedResults();
      if ((_ref = result.suite) != null ? _ref.name : void 0) {
        this.log(tabLevel, "Suite:", this.escape(result.suite.name));
        this.log(tabLevel);
      }
      this.log(tabLevel, "status:", (result.pass ? "passed" : "failed"), ". ", success, " / ", count, " passed.");
      this.log(tabLevel);
      _results = [];
      for (_i = 0, _len = failedResults.length; _i < _len; _i++) {
        failedResult = failedResults[_i];
        _results.push(this.reportCase(failedResult, tabLevel + 1));
      }
      return _results;
    };

    CliReporter.prototype.log = function() {
      var args, tabLevel;
      tabLevel = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return console.log.apply(console, [this.tabs(tabLevel)].concat(__slice.call(args)));
    };

    CliReporter.prototype.escape = function(str) {
      return '"' + str.replace(/\"/g, "\\\"") + '"';
    };

    CliReporter.prototype.tabs = function(tabLevel) {
      return Array(tabLevel).join('  ');
    };

    CliReporter.prototype.reportCase = function(testResult, tabLevel) {
      if (tabLevel == null) {
        tabLevel = 1;
      }
      if (testResult instanceof SuiteResult) {
        return this.reportSuiteResult(testResult, tabLevel);
      } else {
        this.log(tabLevel, "case: ", this.escape(testResult["case"].name));
        this.log(tabLevel, "func:", testResult["case"].func);
        this.log(tabLevel, "error: ", testResult.error);
        return this.log(tabLevel);
      }
    };

    return CliReporter;

  })();

  module.exports = CliReporter;

}).call(this);

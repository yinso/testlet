// Generated by CoffeeScript 1.4.0
(function() {
  var CliReporter, SuiteResult, TestResult, escape, tabs, termColor, util,
    __slice = [].slice;

  TestResult = require('./test-result');

  SuiteResult = require('./suite-result');

  util = require('util');

  termColor = function(color, text) {
    var code, colorCode, key, reset, start, val;
    start = '\033';
    reset = '\033[0m';
    colorCode = {
      fg: {
        black: 30,
        red: 31,
        green: 32,
        yellow: 33,
        blue: 34,
        magenta: 35,
        purple: 35,
        cyan: 36,
        white: 37
      },
      bg: {
        black: 40,
        red: 41,
        green: 42,
        yellow: 43,
        blue: 44,
        magenta: 45,
        cyan: 46,
        white: 47
      },
      reset: 0,
      bright: 1,
      bold: 1,
      dim: 2,
      underscore: 4,
      underline: 4,
      blink: 5,
      inverse: 6,
      hidden: 8
    };
    if (typeof color === 'string') {
      color = {
        fg: color
      };
    }
    code = [];
    for (key in color) {
      val = color[key];
      if (key === 'fg') {
        if (colorCode.fg.hasOwnProperty(val)) {
          code.push(colorCode.fg[val]);
        }
      } else if (key === 'bg') {
        if (colorCode.bg.hasOwnProperty(val)) {
          code.push(colorCode.bg[val]);
        }
      } else if (colorCode.hasOwnProperty(key)) {
        code.push(colorCode[key]);
      }
    }
    return start + '[' + code.join(';') + 'm' + text + reset;
  };

  escape = function(str) {
    return '"' + str.replace(/\"/g, "\\\"") + '"';
  };

  tabs = function(tabLevel, tab) {
    var buffer, i, _i;
    if (tab == null) {
      tab = '  ';
    }
    buffer = '';
    for (i = _i = 0; 0 <= tabLevel ? _i < tabLevel : _i > tabLevel; i = 0 <= tabLevel ? ++_i : --_i) {
      buffer += tab;
    }
    return buffer;
  };

  CliReporter = (function() {

    function CliReporter(result) {
      this.result = result;
    }

    CliReporter.prototype.report = function() {
      var count, failedResult, failedResults, success, _i, _len, _results;
      count = this.result.count();
      success = this.result.success();
      failedResults = this.result.failedResults();
      this.log(0, "");
      this.log(0, termColor({
        fg: 'blue',
        underline: true,
        bright: true,
        bold: true
      }, "Test Results"));
      this.log(0, "");
      this.log(0, "Status:", this.status(this.result), success, "/", count, "suites passed.");
      this.log(0, "");
      _results = [];
      for (_i = 0, _len = failedResults.length; _i < _len; _i++) {
        failedResult = failedResults[_i];
        _results.push(this.reportInner(failedResult, 1));
      }
      return _results;
    };

    CliReporter.prototype.reportInner = function(result, tabLevel) {
      if (tabLevel == null) {
        tabLevel = 1;
      }
      if (result instanceof SuiteResult) {
        return this.reportSuiteResult(result, tabLevel);
      } else {
        return this.reportCase(result, tabLevel);
      }
    };

    CliReporter.prototype.reportSuiteResult = function(result, tabLevel) {
      var count, failedResult, failedResults, success, _i, _len, _ref, _results;
      if (tabLevel == null) {
        tabLevel = 0;
      }
      count = result.count();
      success = result.success();
      failedResults = result.failedResults();
      if ((_ref = result.suite) != null ? _ref.name : void 0) {
        this.log(tabLevel, "Suite:", termColor({
          fg: 'blue',
          underline: true,
          bright: true,
          bold: true
        }, result.suite.name));
        this.log(tabLevel);
      }
      this.log(tabLevel, "status:", this.status(result), success, "/", count, " cases passed.");
      this.log(tabLevel);
      _results = [];
      for (_i = 0, _len = failedResults.length; _i < _len; _i++) {
        failedResult = failedResults[_i];
        _results.push(this.reportCase(failedResult, tabLevel + 1));
      }
      return _results;
    };

    CliReporter.prototype.status = function(result) {
      if (result.pass) {
        return termColor({
          fg: 'green',
          bright: true,
          bold: true
        }, "passed.");
      } else {
        return termColor({
          fg: 'red',
          bold: true
        }, "failed.");
      }
    };

    CliReporter.prototype.log = function() {
      var arg, args, buffer, items, line, lines, tabLevel, _i, _len, _results;
      tabLevel = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          if (typeof arg === 'undefined') {
            _results.push('');
          } else {
            _results.push(arg.toString());
          }
        }
        return _results;
      })();
      buffer = items.join(' ');
      lines = buffer.split(/\r\n|\r|\n/);
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _results.push(console.log(tabs(tabLevel), line));
      }
      return _results;
    };

    CliReporter.prototype.reportCase = function(testResult, tabLevel) {
      var log, _i, _len, _ref;
      if (tabLevel == null) {
        tabLevel = 1;
      }
      if (testResult instanceof SuiteResult) {
        return this.reportSuiteResult(testResult, tabLevel);
      } else {
        this.log(tabLevel, "[case]", termColor({
          fg: 'magenta',
          underline: true
        }, testResult["case"].name));
        this.log(tabLevel + 1, testResult["case"].func);
        this.log(tabLevel, "[error]", termColor({
          fg: 'red',
          bold: true
        }, testResult.error));
        this.log(tabLevel + 1, testResult.error.stack);
        this.log(tabLevel + 1, "");
        this.log(tabLevel + 2, "[expected]", this.serialize(testResult.error.expected));
        this.log(tabLevel + 2, "[actual]  ", this.serialize(testResult.error.actual));
        if (testResult.logs.length > 0) {
          this.log(tabLevel, "[logs]");
          _ref = testResult.logs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            log = _ref[_i];
            this.log.apply(this, [tabLevel + 1].concat(__slice.call(log)));
          }
        }
        return this.log(tabLevel);
      }
    };

    CliReporter.prototype.serialize = function(obj) {
      var helper, id, refs;
      id = 1;
      refs = [];
      helper = function(key, val) {
        var i, ref, _i, _len;
        if (!(val instanceof Object) || !val) {
          return val;
        }
        for (i = _i = 0, _len = refs.length; _i < _len; i = ++_i) {
          ref = refs[i];
          if (ref === val) {
            return "$<ref:" + i + ">";
          }
        }
        refs.push(val);
        return val;
      };
      return JSON.stringify(obj, helper, 2);
    };

    return CliReporter;

  })();

  module.exports = CliReporter;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var Runner, Suite, SuiteResult, Test, TestResult, deepEqual, forEach, _ref,
    __slice = [].slice;

  _ref = require('./util'), deepEqual = _ref.deepEqual, forEach = _ref.forEach;

  TestResult = require('./test-result');

  SuiteResult = require('./suite-result');

  Test = require('./test');

  Suite = require('./suite');

  Runner = (function() {

    function Runner() {
      this.suites = [];
      this.name = "All Tests";
      this.innerLogs = [];
    }

    Runner.prototype.add = function(name, func) {
      var prevSuite, suite;
      suite = new Suite(this, name, func);
      this.suites.push(suite);
      prevSuite = this.currentSuite;
      this.currentSuite = suite;
      try {
        return this.currentSuite["eval"]();
      } finally {
        this.currentSuite = prevSuite;
      }
    };

    Runner.prototype["do"] = function(name, func) {
      if (!this.currentSuite) {
        throw new Error("test.do must be called within test.add");
      }
      return this.currentSuite.add(new Test(this, name, func));
    };

    Runner.prototype.ok = function(val, msg) {
      if (msg == null) {
        msg = "ok(" + val + ")";
      }
      if (!val) {
        throw new Error("failed: " + msg);
      }
    };

    Runner.prototype.equal = function(lhs, rhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " == " + rhs;
      }
      if (!deepEqual(lhs, rhs)) {
        throw new Error("failed: " + msg);
      }
    };

    Runner.prototype.throws = function(lhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " expect to throw";
      }
      try {
        lhs();
        throw new Error("failed: " + msg);
      } catch (e) {

      }
    };

    Runner.prototype.isa = function(lhs, rhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " typeof " + rhs;
      }
      if (typeof rhs === 'string') {
        if (!typeof lhs === rhs) {
          throw new Error("failed: " + msg);
        }
      } else {
        if (!lhs instanceof rhs) {
          throw new Error("failed: " + msg);
        }
      }
    };

    Runner.prototype.run = function(cb) {
      var cases, helper, result;
      result = new SuiteResult(this);
      cases = [].concat(this.suites);
      helper = function(test, next) {
        return test.run(function(err, res) {
          if (err) {
            return next(err);
          } else {
            result.push(res);
            return next(null, result);
          }
        });
      };
      return forEach(cases, helper, function(err, res) {
        return cb(err, result);
      });
    };

    Runner.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.innerLogs.push(args);
    };

    Runner.prototype.resetLog = function() {
      var logs;
      logs = this.innerLogs;
      this.innerLogs = [];
      return logs;
    };

    return Runner;

  })();

  module.exports = Runner;

}).call(this);

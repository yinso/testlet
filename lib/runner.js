// Generated by CoffeeScript 1.4.0
(function() {
  var AsyncTest, NotRunner, Result, Runner, Test, deepEqual, forEach, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./util'), deepEqual = _ref.deepEqual, forEach = _ref.forEach;

  Result = (function() {

    function Result(_case, expected, actual, textual) {
      var res;
      this["case"] = _case;
      this.expected = expected;
      this.actual = actual;
      this.textual = textual;
      this.pass = (function() {
        try {
          if (this.expected instanceof Function) {
            res = this.expected(this.actual);
            return res;
          } else {
            res = deepEqual(this.expected, this.actual);
            return res;
          }
        } catch (e) {
          this.error = e;
          return false;
        }
      }).call(this);
    }

    return Result;

  })();

  Test = (function() {

    Test.ok = function(val) {
      return val && !(val instanceof Error);
    };

    Test.notOk = function(val) {
      return !val;
    };

    Test.throws = function(val) {
      return val instanceof Error;
    };

    Test.equals = function(rhs) {
      return function(lhs) {
        return deepEqual(lhs, rhs);
      };
    };

    Test.negate = function(expect) {
      if (expect instanceof Function) {
        return function(val) {
          return !expect(val);
        };
      } else {
        return function(val) {
          return !deepEqual(val, expect);
        };
      }
    };

    function Test(proc, expected, textual) {
      this.proc = proc;
      this.expected = expected;
      this.textual = textual;
    }

    Test.prototype.run = function(next) {
      var result;
      result = (function() {
        try {
          return new Result(this, this.expected, this.proc(), this.textual);
        } catch (e) {
          return new Result(this, this.expected, e, this.textual);
        }
      }).call(this);
      return next(null, result);
    };

    return Test;

  })();

  AsyncTest = (function(_super) {

    __extends(AsyncTest, _super);

    function AsyncTest() {
      return AsyncTest.__super__.constructor.apply(this, arguments);
    }

    AsyncTest.prototype.run = function(next) {
      var _this = this;
      return this.proc(function(err, res) {
        var result;
        result = err ? new Result(_this, _this.expected, err) : new Result(_this, _this.expected, res);
        return next(null, result);
      });
    };

    return AsyncTest;

  })(Test);

  NotRunner = (function() {

    NotRunner.prototype._not = function(expect) {};

    function NotRunner(prev) {
      this.prev = prev;
    }

    NotRunner.prototype.ok = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.prev.add(new Test(proc, Test.notOk, {
        type: 'not.ok',
        msg: msg
      }));
    };

    NotRunner.prototype.okAsync = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.prev.add(new AsyncTest(proc, Test.notOk, {
        type: 'not.ok',
        msg: msg
      }));
    };

    NotRunner.prototype.equal = function(lhs, rhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " != " + rhs;
      }
      return this.prev.add(new Test((function() {
        return lhs;
      }), Test.negate(rhs), {
        type: 'not.equal',
        msg: msg
      }));
    };

    NotRunner.prototype.equalAsync = function(proc, rhs, msg) {
      if (msg == null) {
        msg = "" + (proc.toString()) + " != " + rhs;
      }
      return this.prev.add(new AsyncTest((function() {
        return proc;
      }), Test.negate(rhs), {
        type: 'not.equal',
        msg: msg
      }));
    };

    NotRunner.prototype["throw"] = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.prev.add(new Test(proc, Test.negate(Test.throws), {
        type: 'not.throw',
        msg: msg
      }));
    };

    NotRunner.prototype.throwAsync = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.prev.add(new AsyncTest(proc, Test.negate(Test.throws), {
        type: 'not.throw',
        msg: msg
      }));
    };

    return NotRunner;

  })();

  Runner = (function() {

    function Runner() {
      this.cases = [];
      this['not'] = new NotRunner(this);
    }

    Runner.prototype.add = function(test) {
      return this.cases.push(test);
    };

    Runner.prototype.ok = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.cases.push(new Test(proc, Test.ok, {
        type: 'ok',
        msg: msg
      }));
    };

    Runner.prototype.okAsync = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.cases.push(new AsyncTest(proc, Test.ok, {
        type: 'ok',
        msg: msg
      }));
    };

    Runner.prototype.equal = function(lhs, rhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " == " + rhs;
      }
      return this.cases.push(new Test((function() {
        return lhs;
      }), rhs, {
        type: 'equal',
        msg: msg
      }));
    };

    Runner.prototype.equalAsync = function(proc, rhs, msg) {
      if (msg == null) {
        msg = "" + lhs + " == " + rhs;
      }
      return this.cases.push(new Async(proc, rhs, {
        type: 'equal',
        msg: msg
      }));
    };

    Runner.prototype["throw"] = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.cases.push(new Test(proc, Test.throws, {
        type: 'throw',
        msg: msg
      }));
    };

    Runner.prototype.throwAsync = function(proc, msg) {
      if (msg == null) {
        msg = proc.toString();
      }
      return this.cases.push(new Async(proc, Test.throws, {
        type: 'throw',
        msg: msg
      }));
    };

    Runner.prototype.run = function(cb) {
      var cases, helper, results;
      results = [];
      cases = [].concat(this.cases);
      helper = function(test, next) {
        return test.run(function(err, res) {
          if (err) {
            return next(err);
          } else {
            results.push(res);
            return next(null, results);
          }
        });
      };
      return forEach(cases, helper, function(err, res) {
        return cb(err, results);
      });
    };

    return Runner;

  })();

  module.exports = Runner;

}).call(this);

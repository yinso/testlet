// Generated by CoffeeScript 1.4.0
(function() {
  var callerFilePath, deepEqual, forEach, path, requireContext, stack;

  path = require('path');

  deepEqual = function(o1, o2) {
    var both, left;
    left = function(o1, o2) {
      var key, val;
      for (key in o1) {
        val = o1[key];
        if (!o2.hasOwnProperty(key)) {
          return false;
        }
      }
      return true;
    };
    both = function(o1, o2) {
      var key, val;
      for (key in o1) {
        val = o1[key];
        if (!deepEqual(o1[key], o2[key])) {
          return false;
        }
      }
      return true;
    };
    if (o1 === o2) {
      return true;
    } else if (o1 instanceof Object && o2 instanceof Object) {
      return left(o1, o2) && left(o2, o1) && both(o1, o2);
    } else {
      return false;
    }
  };

  forEach = function(ary, iterator, callback) {
    var helper;
    helper = function(i, result) {
      var val;
      if (i === ary.length) {
        return callback(null);
      } else {
        val = ary[i];
        return iterator(val, function(err, result) {
          if (err) {
            return callback(err);
          } else {
            return helper(i + 1, result);
          }
        });
      }
    };
    return helper(0, null);
  };

  stack = function() {
    var err, origPrepStack;
    origPrepStack = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_, stack) {
      return stack;
    };
    err = new Error();
    stack = err.stack;
    Error.prepareStackTrace = origPrepStack;
    return stack;
  };

  callerFilePath = function(beyondFunc) {
    var stacks, top;
    stacks = stack();
    top = stacks[0];
    while (stacks.length > 0) {
      if (stacks[0].getFunctionName() === beyondFunc) {
        stacks.shift();
        return stacks[0].getFileName();
      } else {
        stacks.shift();
      }
    }
    throw new Error("stack_not_matching_funcName: " + beyondFunc);
  };

  requireContext = function(spec, context) {
    var callerPath, key, replaced, val;
    callerPath = callerFilePath('requireContext');
    replaced = {};
    for (key in context) {
      val = context[key];
      if (context.hasOwnProperty(key)) {
        if (global.hasOwnProperty(key)) {
          replaced[key] = global[key];
        }
        global[key] = val;
      }
    }
    try {
      return require(path.resolve(callerPath, '..', spec));
    } finally {
      for (key in context) {
        val = context[key];
        if (context.hasOwnProperty(key)) {
          if (replaced.hasOwnProperty(key)) {
            global[key] = replaced[key];
          } else {
            delete global[key];
          }
        }
      }
    }
  };

  module.exports = {
    deepEqual: deepEqual,
    forEach: forEach,
    require: requireContext,
    stack: stack,
    callerFilePath: callerFilePath
  };

}).call(this);
